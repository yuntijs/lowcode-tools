
import { getEntry, formatComponentSchema, resolvePkgJson, parseNpmName } from './utils.mjs'
import parser from '@alilc/lowcode-material-parser'
import { mkfileMeta, mkfileUtils, mkfileView, mkfilesComponent } from './files.mjs'

const init = async ({
  entryPath = "src/index.tsx",
  rootDir = '',
  devAlias = undefined,
  components,
  metaFormat = undefined,
  lowcodeDir = 'lowcode',
  skipComponents,
}) => {
  const entry = getEntry(rootDir, entryPath);
  let result = await parser.default({ accesser: 'local', entry, npmClient: 'npm' });

  const packageInfo = await resolvePkgJson()
  const PARSED_NPM_NAME = parseNpmName(packageInfo.name);
  if (!result) {
    // If the result is not parsed, the result is generated by default
    result = [
      formatComponentSchema({
        componentName: PARSED_NPM_NAME.uniqueName,
        npm: {
          package: packageInfo.name,
          version: packageInfo.version || "{{version}}",
          exportName: 'default',
          main: 'lib/index.js',
          destructuring: false,
          subName: '',
        },
      }),
    ];
  } else if (result.length === 1 && result[0].componentName === 'default') {
    result[0].componentName = PARSED_NPM_NAME.uniqueName;
    if (result[0].title === 'default') {
      result[0].title = PARSED_NPM_NAME.uniqueName;
    }
  }

  const componentsMetaArr = [];

  const metaDevSubfix = devAlias ? `.${devAlias}` : '';
  const filteredComponents = result.filter((item) => {
    return !skipComponents.includes(item.componentName) && (components ? components.includes(item.componentName) : true)
  });
 
  filteredComponents.forEach((component) => {

    const componentNameFolder = component.componentName;

    componentsMetaArr.push({
      path: `./${componentNameFolder}/meta${metaDevSubfix}`,
      name: `${component.componentName}Meta`,
    })
 
    mkfilesComponent({
      rootDir,
      lowcodeDir,
      metaDevSubfix,
      metaFormat,
      component,
      packageInfo,
      componentNameFolder
    })

  });
  
  mkfileView({rootDir, lowcodeDir})
  mkfileUtils({rootDir, lowcodeDir})
  mkfileMeta({rootDir, lowcodeDir, componentsMetaArr})

}

export default init
